# vim: set ft=make:

# Generate object names
# - src/a.c -> obj/a.c.o
# - EM_OBJPATH
OBJS:=$(patsubst $(SRCDIR)/%,$(EM_OBJPATH)/%$(OBJEXT),$(SRCS))

# rule specific variables
$(OBJS):EM_PKGS:=$(strip $(PKGS) $(foreach d,$(DEPS),$(EmLibraryPkgs.$d)))
$(OBJS):EM_FLAGS:=$(FLAGS)

# Check previous flags
# - EM_FLAGS propagate here too
$(EM_OBJPATH)/.em/$(EM_NAME).%.cmd:always $(foreach d,$(DEPS),$(EmLibraryPkgDeps.$d)) $$(@D)/.f
	@$(if $(VERBOSE),echo "Checking $@")
	@$(call UpdateIfNotEqual,$@,$(Compile.$*) $(EM_FLAGS) $(if $(EM_PKGS),$(shell $(PKG_CONFIG) --cflags $(EM_PKGS))))

# Compile (+ generate *.d)
# - rule only for OBJS
$(OBJS):$(EM_OBJPATH)/%$(OBJEXT):$(SRCDIR)/% $(EM_OBJPATH)/.em/$(EM_NAME)$$(suffix $$*).cmd $$(@D)/.f
	@echo "Compiling$(if $(WANT_PIC), PIC) $<"
	$(if $(VERBOSE),,@)$(Compile$(suffix $*)) $(EM_FLAGS) $(if $(EM_PKGS),$(shell $(PKG_CONFIG) --cflags $(EM_PKGS))) $<

# Include dependencies generated by compiler
# - obj/a.c.o -> obj/a.c.d
-include $(patsubst %$(OBJEXT),%$(DEPEXT),$(OBJS))

# reset temporaries
EM_NAME:=
EM_OBJPATH:=
EM_LIB_PKGS:=
# end
